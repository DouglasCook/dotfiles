" install plug if its not already there
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" -------------------------- PLUGIN SETUP ---------------------------------
call plug#begin('~/.vim/bundle')
Plug 'w0rp/ale'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer' }

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'easymotion/vim-easymotion'
Plug 'wesQ3/vim-windowswap'
Plug 'scrooloose/nerdcommenter'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-unimpaired'
" can't use css colour until it can be disabled for certain filetypes eg json
"Plug 'ap/vim-css-color', { 'for': ['css', 'sass', 'less', 'jsx', 'js', 'html'] }

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'

Plug 'sheerun/vim-polyglot'
Plug 'ambv/black'
Plug 'ternjs/tern_for_vim', { 'do': 'yarn'}
Plug 'kovisoft/slimv'

Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
call plug#end()


" ----------------------------- NORMAL STUFF ------------------------------

colorscheme wombat256mod
set number			               " show line numbers

set tabstop=2
set shiftwidth=2
set expandtab			             " use spaces for tabs
set softtabstop=2              " for deleting multiple spaces at a time if they were a tab?

set cindent			               " tries to auto indent C style code
set autoindent                 " keeps things indented?
set nosmartindent              " supposed to stop python # comments from being pushed to left
set linebreak                  " stops lines from wrapping in the middle of words
set breakindent                " use same level indentation on wrapped lines
set colorcolumn=80             " highlight at 80 characters
set winwidth=90                " set current pane to width 90 (if less) when moving into it
set cursorline                 " highlight current line
set scrolloff=8                " keep 3 lines visible around current line when scrolling
set guifont=Hack\ Nerd\ Font\ Mono:h12

set hidden                     " allow modified buffers to be hidden without saving changes
set history=500                " remember more previous commands
set synmaxcol=200              " only do syntax highlighting on first columns for speedup with very long lines

set wildmenu                   " fix autocomplete for opening files with :e
set wildmode=longest:full,list:full

set hlsearch                   " start highlighting matches as they are typed
set incsearch
set smartcase                  " case insensitive search unless capitals are specified
set ignorecase

set backupdir=~/.vim/backup//  " put all swap files and backups in one folder
set directory=~/.vim/swp//
set updatetime=500             " write swap files every 500ms, dictates git-gutter update rate

set modelines=0                " something to do with a security flaw
set nocompatible
set encoding=utf-8
set ttyfast
set lazyredraw

set noerrorbells               " disable error noises/flashes
set novisualbell
set vb t_vb=

set tags=./tags;/              " search up through directories for tags file

set foldmethod=syntax

" diff in vertical splits by default, don't fold until 4 cols nested
set diffopt=filler,vertical,foldcolumn:4

cd ./                          " set working directory

" reload vimrc automatically when it is saved
augroup reload_vimrc
    autocmd! bufwritepost .vimrc source %
augroup END

" syntax highlighting slows down loading for larger files
augroup large_files
  autocmd Filetype json if getfsize(@%) > 1000 | setlocal syntax=off foldmethod=indent | endif
augroup END


" ---------------------------- SHORTCUT MAPPINGS ----------------------------
" can't have inline commments here, whitespace after the mapping is added to it!

" get rid of highlighting
nnoremap <leader><space> :noh<CR>

" saving
nnoremap <leader>s :w<CR>
cnoreabbrev W w
" strip all trailing whitespace and save
nnoremap <leader>a :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:w<CR>

" quitting
nnoremap <leader>q :q<CR>

" stop the weird command history window from popping up when trying to quit
map q: :q

" get rid of annoying f1 help popup
:nmap <F1> <nop>
:imap <F1> <nop>

" add a pdb breakpoint
function! InsertIpdb()
    let trace = expand("import ipdb; ipdb.set_trace()")
    execute "normal o".trace
endfunction

nnoremap <leader>p :call InsertIpdb()<CR>

" colour schemes
nnoremap <F2> :colorscheme wombat256mod<CR>
nnoremap <F3> :colorscheme kalisi<CR>
nnoremap <F4> :colorscheme solarized<CR>
nnoremap <F5> :colorscheme base16-ateliersulphurpool<CR>
nnoremap <F6> :colorscheme seoul256<CR>
nnoremap <F10> :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Use silver searcher for grepping if available
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  set grepformat=%f:%l:%c%m
endif


" ----------------------------- PLUGINS -----------------------------

" NERDTREE
let g:NERDTreeWinSize = 40
let g:NERDTreeChDirMode = 2 " change vim working dir when nerdtree root changes
let g:NERDTreeCascadeSingleChildDir = 0 " don't collapse single child nodes by default
let g:NERDTreeIgnore = ['\.vim$', '\~$', '__pycache__$[[dir]]']

let g:nerdtree_tabs_open_on_gui_startup = 0

map <leader>n :NERDTreeTabsToggle<CR>
map <leader>m :NERDTreeFind<CR>


" AIRLINE
set laststatus=2 " always display the status bar, even with single pane
let g:airline_section_b = '' " don't show branch info
"let g:airline_section_c = '%t' " only show name of the file, not whole path
let g:airline_inactive_collapse = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='dark'


" ALE
let g:ale_linters = {
\  'python': ['pylint'],
\  'javascript': ['eslint', 'flow'],
\}
let g:ale_lint_on_text_changed = 'never' " don't lint while editing
let g:ale_echo_msg_format = '%linter% says: %s'
let g:ale_maximum_file_size = 1000000 " don't try to lint massive files eg data files

let g:ale_python_pylint_change_directory = 0

" enable django pylint plugin for environments its installed in
autocmd Filetype python call EnablePylintDjangoIfInstalled()
function EnablePylintDjangoIfInstalled()
  let importError = system('python -c "import pylint_django"')
  if importError == ''
    let g:ale_python_pylint_options = '--load-plugins pylint_django'
  endif
endfunction


" YOUCOMPLETEME
let g:ycm_filetype_blacklist = {'sql': 1, 'csv': 1, 'txt': 1, 'wiki': 1, 'json': 1}
let g:ycm_python_binary_path = 'python' " use first python on path, means virtualenvs work nicely
let g:ycm_autoclose_preview_window_after_insertion = 1

" useful for jumping to source of third party libraries
nnoremap <leader>d :YcmCompleter GoToDefinition<CR>


" CTRLP
let g:ctrlp_working_path_mode = 'r' " use the nearest .git directory as working directory
let g:ctrlp_custom_ignore = {
\   'dir': '\v[\/](\.git|node_modules|fonts)$',
\   'file': '\v\.pyc$',
\}
let g:ctrlp_max_files = 0

nmap <C-j> :CtrlPBuffer<CR>
nmap <C-k> :CtrlPTag<CR>


" POLYGLOT SYNTAX
let g:polyglot_disabled = ['yaml']

" PYTHON
let python_highlight_all = 1

" JSX
let g:jsx_ext_required = 0 " use on all filetypes

" JAVASCRIPT
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1


" SLIME MODE FOR VIM
let g:slimv_repl_split = 4 " open repl in vertical split on the right
let g:paredit_mode = 0 " don't dicate parentheses!


" VIM WIKI
" default <leader>ww is used by windowswap plugin
nmap <leader>w <Plug>VimwikiIndex

let g:vimwiki_folding = 'expr' " enable folding
